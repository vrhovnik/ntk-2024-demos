@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NTK24.Shared
@using NTK24.Web.Options
@model Pages.Groups.IndexPageModel
@inject Microsoft.Extensions.Options.IOptions<AppOptions> CurrentAppOptions

@{
    ViewData["Title"] = "List Link Groups";
}

@section breadcrumb
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a asp-page="/User/Dashboard">Dashboard</a>
        </li>
        <li aria-current="page"
            class="breadcrumb-item active">
            Link group list
        </li>
    </ol>
}

<h3>List linked lists</h3>

<div class="row">
    <div class="col-12">
        <div class="float-end mt-2 mb-2">
            <a asp-page="/Groups/Create"
               class="btn btn-success">
                Create new link group <i class="fas fa-plus"></i>
            </a>
        </div>
    </div>
</div>

<div id="app">
    <div class="form-floating mb-3">
        <v-text-field clearable label=" input search term and press enter"
                      v-model="query"
                      v-on:keyup.enter="callSearchAPI"
                      variant="solo">
        </v-text-field>
        <v-divider></v-divider>
    </div>
    <div v-if="isLoading">
        <v-skeleton-loader :elevation="4" type="table"></v-skeleton-loader>
    </div>
    <div v-else>
        <div class="row">
            <div class="col-12" v-if="searchResults.length">
                <v-data-table :items="searchResults"
                              item-value="id"
                              :headers="headers">
                    <template v-slot:item="{ item }">
                        <tr>
                            <td>
                                <a href="{{ generalRedirectUrl }}/{{ item.id }}">
                                    {{ item.name }}
                                </a>
                            </td>
                            <td class="text-center">{{ item.createdAt }}</td>
                            <td>{{ item.shortName }}</td>
                            <td class="text-center">{{ item.clicked }}</td>
                            <td class="text-center">{{ item.linkCount }}</td>
                            <td class="text-center">
                                <v-btn icon="fas fa-edit" density="compact" v-on:click="goToFunction('Create',item.id)"></v-btn>
                                &nbsp;&nbsp;
                                <v-btn icon="fas fa-trash" density="compact" v-on:click="goToFunction('Delete',item.id)"></v-btn>
                            </td>
                        </tr>
                    </template>
                    <td>
                </v-data-table>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_VueJs")
    @await Html.PartialAsync("_Vuetify")

    <script>
        const { createApp,ref } = Vue;
        const { createVuetify } = Vuetify;
        const vuetify = createVuetify();
        const query = ref('');
        const generalRedirectUrl = '@($"{CurrentAppOptions.Value.ApiUrl}/{ConstantRouteHelper.RedirectRoute}/")';
        let isLoading = ref(false);
        let searchResults = ref([]);
        const headers= [
            { title: 'Name', key: 'name', align: 'start'},
            { title: 'Created at', key: 'createdAt',align: 'center' },
            { title: 'Shortname ', key: 'shortName' },
            { title: 'No of. clicked',  key: 'clicked',align: 'center' },            
            { title: 'Link numbers',  key: 'linkCount',align: 'center' }
        ];
        const app = createApp({
            setup() {
                return {
                    query,
                    generalRedirectUrl,
                    callSearchAPI,
                    goToFunction,
                    searchResults,
                    isLoading,
                    headers
                }
            }, mounted() {
                console.log('Calling search and getting back all the results');
                callSearchAPI();
            }
        });
        app.use(vuetify).mount('#app');
        function goToFunction(location, currentId) {
            const url = 'Groups/' + location;
            console.log(url);
            window.location.replace(url + '?linkGroupId=' + currentId);
        }
        function callSearchAPI() {
            console.log('Searching with ' + query);                        
            isLoading.value = true;
            let searchUrl = '@Url.Page("Index", "Filter")' + "&query=" + query;
            console.log("Search url is " + searchUrl);
            fetch(searchUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(response => {
                if (!response.ok) {
                    console.log("There has been an error while fetching data from the server.");
                    return Promise.reject(response);
                }
                return response.json();
            })
                .then(data => {
                    console.log(data);
                    searchResults.value = data;
                });
            isLoading.value = false;            
        }
    </script>
}

@section Head
{
    @await Html.PartialAsync("_VuetifyStyles")
}